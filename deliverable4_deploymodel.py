# -*- coding: utf-8 -*-
"""Deliverable4_DeployModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14piiWBHlDwenlq21jTVXUs7aOwG7w55i
"""

import numpy as np
import pandas as pd
import pickle

#READING THE PREVIOUSLY SAVED MINI COMBINED_DF
mini_df = pd.read_csv('df.csv')

#LOAD THE MODEL FROM DISK
filename = 'finalized_model.sav'
model = pickle.load(open(filename, 'rb'))

def getListOfFinancialRatios(mini_df):
  listOfFinancialRatios = mini_df.columns.values.tolist()
  listOfFinancialRatios.remove('Next Year Stock Return')
  return listOfFinancialRatios

#FUNCTION THAT VECTORIZES INPUT DATA
def vectorizeInput(listOfFinancialRatios, listOfVars):
  dictOfRatios = dict.fromkeys(listOfFinancialRatios , 0)

  if listOfVars[0] == 0:
    dictOfRatios['Revenue Growth']  =  0
  else:
    dictOfRatios['Revenue Growth']  =  (listOfVars[1] - listOfVars[0]) / listOfVars[0]

  if listOfVars[5] == 0:
    dictOfRatios['interestCoverage']  =  0
  else:
    dictOfRatios['interestCoverage']  =  listOfVars[4] / listOfVars[5]

  if listOfVars[8] == 0:
    dictOfRatios['Receivables Turnover']  =  0
  else:
    dictOfRatios['Receivables Turnover']  =  listOfVars[1] / listOfVars[8]

  if listOfVars[9] == 0:
    dictOfRatios['Inventory Turnover']  =  0
  else:
    dictOfRatios['Inventory Turnover']  =  listOfVars[2] / listOfVars[9]

  if listOfVars[12] == 0:
    dictOfRatios['Payables Turnover']  =  0
  else:
    dictOfRatios['Payables Turnover']  =  listOfVars[2] / listOfVars[12]

  if listOfVars[13] == 0:
    dictOfRatios['currentRatio']  =  0
    dictOfRatios['quickRatio']  =  0
    dictOfRatios['cashRatio']  =  0
  else:
    dictOfRatios['currentRatio']  =  listOfVars[10] / listOfVars[13]
    dictOfRatios['quickRatio']  =  (listOfVars[10] - listOfVars[9]) / listOfVars[13]
    dictOfRatios['cashRatio']  =  listOfVars[7] / listOfVars[13]

  if listOfVars[16] == 0:
    dictOfRatios['returnOnEquity']  =  0
    dictOfRatios['debtEquityRatio']  =  0
  else:
    dictOfRatios['returnOnEquity']  =  listOfVars[6] / listOfVars[16]
    dictOfRatios['debtEquityRatio']  =  listOfVars[14] / listOfVars[16]

  if listOfVars[11] == 0:
    dictOfRatios['debtRatio']  =  0
  else:
    dictOfRatios['debtRatio']  =  listOfVars[14] / listOfVars[11]

  if listOfVars[20] == 0:
    dictOfRatios['dividendYield']  =  0
  else:
    dictOfRatios['dividendYield']  =  listOfVars[19] / listOfVars[20]

  if listOfVars[18] == 0:
    dictOfRatios['EPS']  =  0
  else:
    dictOfRatios['EPS']  =  (listOfVars[6] - listOfVars[15]) / listOfVars[18]

  if (dictOfRatios['EPS'] == 0):
    dictOfRatios['PE ratio']  =  0
  else:
    dictOfRatios['PE ratio']  =  listOfVars[20] / dictOfRatios['EPS']

  if listOfVars[6] == listOfVars[17]:
    dictOfRatios['priceToFreeCashFlowsRatio']  =  0
  else:
    dictOfRatios['priceToFreeCashFlowsRatio']  =  (listOfVars[20] * listOfVars[18]) / (listOfVars[6] - listOfVars[17])


  if listOfVars[1] == 0:
    dictOfRatios['EBITDA Margin']  =  0
    dictOfRatios['Net Profit Margin']  =  0
    dictOfRatios['priceToSalesRatio']  =  0
    dictOfRatios['grossProfitMargin']  =  0
  else:
    dictOfRatios['EBITDA Margin']  =  listOfVars[3] / listOfVars[1]
    dictOfRatios['Net Profit Margin']  =  listOfVars[6] / listOfVars[1]
    dictOfRatios['priceToSalesRatio']  =  (listOfVars[20] * listOfVars[18]) / listOfVars[1]
    dictOfRatios['grossProfitMargin']  =  (listOfVars[1] - listOfVars[2]) / listOfVars[1]

  dictOfRatios['Dividend per Share']  =  listOfVars[19]

  if (listOfVars[21] == "basicMaterials"):
    dictOfRatios['Sector_Basic Materials']  =  1
  elif (listOfVars[21] == "communicationServices"):
    dictOfRatios['Sector_Communication Services']  =  1
  elif (listOfVars[21] == "consumerCyclical"):
    dictOfRatios['Sector_Consumer Cyclical']  =  1
  elif (listOfVars[21] == "consumerDefensive"):
    dictOfRatios['Sector_Consumer Defensive']  =  1
  elif (listOfVars[21] == "energy"):
    dictOfRatios['Sector_Energy']  =  1
  elif (listOfVars[21] == "financialServices"):
    dictOfRatios['Sector_Financial Services']  =  1
  elif (listOfVars[21] == "healthcare"):
    dictOfRatios['Sector_Healthcare']  =  1
  elif (listOfVars[21] == "industrials"):
    dictOfRatios['Sector_Industrials']  =  1
  elif (listOfVars[21] == "realEstate"):
    dictOfRatios['Sector_Real Estate']  =  1
  elif (listOfVars[21] == "technology"):
    dictOfRatios['Sector_Technology']  =  1
  elif (listOfVars[21] == "utilities"):
    dictOfRatios['Sector_Utilities']  =  1

  listOfCalculatedRatios = list(dictOfRatios.values())
  vector = np.asarray(listOfCalculatedRatios)

  return vector

def preprocess_sample_point(vector):
  vector = vector.reshape(1, -1)
  result = model.predict(vector)
  return str(round(result[0], 2)) + "%"

def run_model(listOfVars):
  vector = vectorizeInput(getListOfFinancialRatios(mini_df), listOfVars)
  return (preprocess_sample_point(vector))